# views/conversion_to_icost_page_web.py
import streamlit as st
import pandas as pd
import zipfile
import io
import os

class ConversionToiCostPage:
    def __init__(self, controller=None):
        self.controller = controller
        if 'file_data' not in st.session_state:
            st.session_state.file_data = []
        
        # Ê∑ªÂä†ÂÆπÂô®ÁöÑÂç†‰ΩçÁ¨¶
        self.table_placeholder = None
        self.status_placeholder = None
        self.download_placeholder = None

    def render(self):
        """Ê∏≤ÊüìËΩ¨Êç¢È°µÈù¢"""
        col1, col2 = st.columns([1, 8])
        with col1:
            st.image("./Assets/iCost_icon.png", width=70)
        with col2:
            st.header("iCostÊ®°Áâà")
        
        # Âú® session_state ‰∏≠Ê∑ªÂä†‰∏Ä‰∏™ÈîÆÊù•ËøΩË∏™Êñá‰ª∂‰∏ä‰º†Âô®ÁöÑÈîÆ
        if 'uploader_key' not in st.session_state:
            st.session_state.uploader_key = 0

        st.markdown("---")

        # Ê®°ÂûãËÆæÁΩÆÂå∫Âüü
        with st.container():
            col1, col2 = st.columns([1, 2])
            with col1:
                model = st.selectbox(
                    "ÈÄâÊã©Ê®°Âûã",
                    options=["GPT-4o"],#,"GPT-4o-mini", "DeepSeek-V3"],
                    help="ÈÄâÊã©Áî®‰∫éÂ§ÑÁêÜÊñá‰ª∂ÁöÑAIÊ®°Âûã-web"
                )
                temperature = 0.3
                batch_size = 150
            with col2:
                # API key ËæìÂÖ•Ê°Ü
                api_key = st.text_input(
                    "OpenAI API", 
                    type="password",  # ‰ΩøÁî®passwordÁ±ªÂûãÈöêËóèËæìÂÖ•ÂÜÖÂÆπ
                    help="ËæìÂÖ•ÂØπÂ∫îÊ®°ÂûãÁöÑAPI Key",
                    key="api_key_input"
                )
                # Â¶ÇÊûúËæìÂÖ•‰∫ÜAPI keyÔºå‰øùÂ≠òÂà∞session state
                if api_key:
                    st.session_state.api_key = api_key
                
            
        st.write("\n")

        # Êñá‰ª∂‰∏ä‰º†Âå∫Âüü
        with st.container():
            # Ê∑ªÂä†‰∏ä‰º†Âå∫ÂüüÂíåÊ∏ÖÈô§ÊåâÈíÆÁöÑÂàóÂ∏ÉÂ±Ä
            upload_col, clear_col = st.columns([8, 1])
            
            
            with upload_col:
                uploaded_files = st.file_uploader(
                    "ËØ∑Â∞ÜPDFÈì∂Ë°åË¥¶ÂçïÊãñÂÖ•Ê°Ü‰∏≠ÔºåÊàñÁÇπÂáª‰∏ä‰º†ÊåâÈíÆ(ÊîØÊåÅÂ§ö‰∏™Êñá‰ª∂)",
                    type=["pdf"],
                    accept_multiple_files=True,
                    label_visibility="visible",
                    key=f"file_uploader_{st.session_state.uploader_key}"  # ‰ΩøÁî®Âä®ÊÄÅkey
                )
            
            # Ëé∑ÂèñÂΩìÂâç‰∏ä‰º†ÁöÑÊñá‰ª∂ÂêçÂàóË°®
            current_uploaded_filenames = {file.name for file in uploaded_files} if uploaded_files else set()
            
            # ‰ªé session_state.file_data ‰∏≠ÁßªÈô§Â∑≤Áªè‰∏çÂú®‰∏ä‰º†ÂàóË°®‰∏≠ÁöÑÊñá‰ª∂
            st.session_state.file_data = [
                f for f in st.session_state.file_data 
                if f["Êñá‰ª∂Âêç"] in current_uploaded_filenames
            ]

            if uploaded_files:
                # Ê£ÄÊü•ÊòØÂê¶ÊúâÊñ∞Êñá‰ª∂ÈúÄË¶ÅÊ∑ªÂä†Âà∞ file_data
                current_files = {f['Êñá‰ª∂Âêç'] for f in st.session_state.file_data}
                for file in uploaded_files:
                    if file.name not in current_files:
                        st.session_state.file_data.append({
                            "Êñá‰ª∂Âêç": file.name,
                            "‰∫§ÊòìÊù°Êï∞": "ÂæÖÂ§ÑÁêÜ", 
                            "Â∑≤Â§ÑÁêÜÊù°Êï∞": "ÂæÖÂ§ÑÁêÜ",
                            "Èì∂Ë°åÁ±ªÂûã": "ÂæÖÂ§ÑÁêÜ",
                            "Ë¥¶Êà∑Á±ªÂûã": "ÂæÖÂ§ÑÁêÜ",
                            "ÈúÄË¶ÅÂ§ÑÁêÜ": True,
                            "ËæìÂá∫Êñá‰ª∂": None
                        })
                
                # ÂàõÂª∫Âç†‰ΩçÁ¨¶
                self.table_placeholder = st.empty()
                self.status_placeholder = st.empty()
                
                # Êõ¥Êñ∞Êñá‰ª∂Ë°®Ê†ºÊòæÁ§∫
                self.update_file_table()


        # Êìç‰ΩúÊåâÈíÆÂå∫Âüü
        button_col1, button_col2, button_col3 = st.columns([0.7, 1, 3])  # Ë∞ÉÊï¥‰∏âÂàóÁöÑÊØî‰æã
        
        # ÂºÄÂßãÂ§ÑÁêÜÊåâÈíÆ
        process_button = button_col1.button("ÂºÄÂßãÂ§ÑÁêÜ", type="primary")
        
        # Ê∏ÖÈô§ÊåâÈíÆ
        if button_col2.button("Ê∏ÖÈô§ÊâÄÊúâÊñá‰ª∂", type="secondary", use_container_width=True):
            # Â¢ûÂä† uploader_key Êù•Âº∫Âà∂ÈáçÊñ∞ÂàõÂª∫‰∏ä‰º†ÁªÑ‰ª∂
            st.session_state.uploader_key += 1
            # Ê∏ÖÁ©∫ session_state ‰∏≠ÁöÑÊñá‰ª∂Êï∞ÊçÆ
            st.session_state.file_data = []
            # ÈáçÊñ∞Âä†ËΩΩÈ°µÈù¢
            st.rerun()
        
        # ‰∏ãËΩΩÊåâÈíÆÁöÑÂç†‰ΩçÁ¨¶
        self.download_placeholder = button_col3.empty()

        if process_button:
            if not uploaded_files:
                st.warning("ËØ∑ÂÖà‰∏ä‰º†Êñá‰ª∂")
                return
            
            if self.controller:
                # Âè™Â§ÑÁêÜË¢´ÈÄâ‰∏≠ÈúÄË¶ÅÂ§ÑÁêÜÁöÑÊñá‰ª∂
                files_to_process = [
                    file for file in uploaded_files 
                    if any(f["Êñá‰ª∂Âêç"] == file.name and f["ÈúÄË¶ÅÂ§ÑÁêÜ"] 
                          for f in st.session_state.file_data)
                ]
                
                if not files_to_process:
                    st.warning("ËØ∑ÈÄâÊã©Ëá≥Â∞ë‰∏Ä‰∏™ÈúÄË¶ÅÂ§ÑÁêÜÁöÑÊñá‰ª∂")
                    return

                # ÊòæÁ§∫ËøõÂ∫¶‰ø°ÊÅØ
                status_text = st.empty()
                processed_files = []  # Â≠òÂÇ®Â§ÑÁêÜÂÆåÊàêÁöÑÊñá‰ª∂‰ø°ÊÅØ
                
                # ÈÄê‰∏™Â§ÑÁêÜÊñá‰ª∂
                for i, file in enumerate(files_to_process, 1):
                    status_text.text(f"Ê≠£Âú®Â§ÑÁêÜ: {file.name} ({i}/{len(files_to_process)})")
                    
                    try:
                        result = self.controller.process_files(
                            file=file,
                            model=model.lower(),
                            temperature=temperature,
                            batch_size=batch_size,
                            callback=self.update_progress
                        )
                        
                        if result is None:  # Â§ÑÁêÜÂ§±Ë¥•
                            st.error(f"Êñá‰ª∂ {file.name} Â§ÑÁêÜÂ§±Ë¥•ÔºåËØ∑Ê£ÄÊü•ÈîôËØØ‰ø°ÊÅØ„ÄÇ")
                            continue
                            
                        # Â≠òÂÇ®Â§ÑÁêÜÊàêÂäüÁöÑÊñá‰ª∂‰ø°ÊÅØ
                        processed_files.append({
                            'filename': file.name,
                            'excel_data': result['excel_data'],
                            'output_file': result['output_file']
                        })
                            
                    except Exception as e:
                        st.toast(f"‚ùå Â§ÑÁêÜÊñá‰ª∂ {file.name} Êó∂ÂèëÁîüÈîôËØØ: {str(e)}ÔºåËØ∑Ê£ÄÊü•API KeyÊàñÁΩëÁªúËøûÊé•", icon="üö®")
                        continue
                
                #status_text.text("ÊâÄÊúâÊñá‰ª∂Â§ÑÁêÜÂÆåÊàêÔºÅ")
                
                # Â¶ÇÊûúÊúâÊàêÂäüÂ§ÑÁêÜÁöÑÊñá‰ª∂ÔºåÊèê‰æõ‰∏ãËΩΩÈÄâÈ°π
                if processed_files:
                    if len(processed_files) > 1:
                        # Â§öÊñá‰ª∂ÔºöÂàõÂª∫ZIPÊñá‰ª∂Âú®ÂÜÖÂ≠ò‰∏≠
                        zip_buffer = io.BytesIO()
                        with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
                            for processed_file in processed_files:
                                excel_buffer = io.BytesIO()
                                with pd.ExcelWriter(excel_buffer, engine='openpyxl') as writer:
                                    pd.DataFrame(columns=processed_file['excel_data'].columns).to_excel(
                                        writer, index=False, sheet_name="iCost Template"
                                    )
                                    processed_file['excel_data'].to_excel(
                                        writer, index=False, header=False, 
                                        startrow=1, sheet_name="iCost Template"
                                    )
                                excel_buffer.seek(0)
                                zip_file.writestr(processed_file['output_file'], excel_buffer.getvalue())
                        
                        zip_buffer.seek(0)
                        # Êõ¥Êñ∞‰∏ãËΩΩÊåâÈíÆ - ZIPÊñá‰ª∂
                        self.download_placeholder.download_button(
                            label="‰∏ãËΩΩZIPÊñá‰ª∂",
                            data=zip_buffer,
                            file_name="processed_files.zip",
                            mime="application/zip"
                        )
                    else:
                        # ÂçïÊñá‰ª∂ÔºöÁõ¥Êé•ÂàõÂª∫ExcelÊñá‰ª∂Âú®ÂÜÖÂ≠ò‰∏≠
                        excel_buffer = io.BytesIO()
                        with pd.ExcelWriter(excel_buffer, engine='openpyxl') as writer:
                            pd.DataFrame(columns=processed_files[0]['excel_data'].columns).to_excel(
                                writer, index=False, sheet_name="iCost Template"
                            )
                            processed_files[0]['excel_data'].to_excel(
                                writer, index=False, header=False, 
                                startrow=1, sheet_name="iCost Template"
                            )
                        excel_buffer.seek(0)
                        # Êõ¥Êñ∞‰∏ãËΩΩÊåâÈíÆ - ExcelÊñá‰ª∂
                        self.download_placeholder.download_button(
                            label="‰∏ãËΩΩExcelÊñá‰ª∂",
                            data=excel_buffer,
                            file_name=processed_files[0]['output_file'],
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                        )

    def update_file_table(self):
        """Êõ¥Êñ∞Êñá‰ª∂Ë°®Ê†ºÊòæÁ§∫"""
        if st.session_state.file_data:
            df = pd.DataFrame(st.session_state.file_data)
            self.table_placeholder.dataframe(
                df,
                column_config={
                    "Êñá‰ª∂Âêç": st.column_config.TextColumn("Êñá‰ª∂ÂêçÁß∞"),
                    "‰∫§ÊòìÊù°Êï∞": st.column_config.NumberColumn("‰∫§ÊòìÊÄªÊï∞", format="%d"),
                    "Â∑≤Â§ÑÁêÜÊù°Êï∞": st.column_config.NumberColumn("Â∑≤ÂÆåÊàêÊï∞", format="%d"),
                    "Èì∂Ë°åÁ±ªÂûã": st.column_config.TextColumn("ÊâÄÂ±ûÈì∂Ë°å"),
                    "Ë¥¶Êà∑Á±ªÂûã": st.column_config.TextColumn("Ë¥¶Êà∑ÁßçÁ±ª"),
                    "ÈúÄË¶ÅÂ§ÑÁêÜ": st.column_config.CheckboxColumn("ÊòØÂê¶Â§ÑÁêÜ"),
                    "ËæìÂá∫Êñá‰ª∂": st.column_config.TextColumn("ËæìÂá∫Êñá‰ª∂")
                },
                hide_index=True,
                use_container_width=True
            )

    def update_progress(self, filename, total_transactions=None, total_processed_count=None, 
                       bank_type=None, account_type=None, output_file=None, excel_data=None,
                       error_message=None):
        """Êõ¥Êñ∞Â§ÑÁêÜËøõÂ∫¶ÁöÑÂõûË∞ÉÂáΩÊï∞"""
        for item in st.session_state.file_data:
            if item["Êñá‰ª∂Âêç"] == filename:
                if total_transactions is not None:
                    item["‰∫§ÊòìÊù°Êï∞"] = str(total_transactions)
                if total_processed_count is not None:
                    item["Â∑≤Â§ÑÁêÜÊù°Êï∞"] = str(total_processed_count)
                if bank_type is not None:
                    item["Èì∂Ë°åÁ±ªÂûã"] = bank_type
                if account_type is not None:
                    item["Ë¥¶Êà∑Á±ªÂûã"] = account_type
                if output_file is not None:
                    item["ËæìÂá∫Êñá‰ª∂"] = output_file
                break
        
        # Êõ¥Êñ∞Ë°®Ê†ºÊòæÁ§∫
        self.update_file_table()
        
        # Â¶ÇÊûúÊúâÈîôËØØ‰ø°ÊÅØÔºåÊòæÁ§∫ÈîôËØØÊèêÁ§∫
        if error_message:
            self.status_placeholder.error(f"‚ùå Â§ÑÁêÜÊñá‰ª∂ {filename} Â§±Ë¥•: {error_message}ÔºåËØ∑Ê£ÄÊü•API KeyÊàñÁΩëÁªúËøûÊé•", icon="üö®")
        

